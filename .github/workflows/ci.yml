name: 🚀 Anvil-NextJS Bridge CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Lint and Type Check (Fast feedback)
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bridge/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd bridge
          npm ci

      - name: 🔍 Run ESLint
        run: |
          cd bridge
          npm run lint

      - name: 🔧 Run TypeScript type check
        run: |
          cd bridge
          npm run type-check

  # Comprehensive Test Suite
  test:
    name: 🧪 Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bridge/package-lock.json

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📥 Install dependencies
        run: |
          cd bridge
          npm ci

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          cd bridge
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit -- --ci --coverage --watchAll=false
              ;;
            "integration") 
              npm run test:integration -- --ci --watchAll=false
              ;;
            "e2e")
              npm run test:all:ci
              ;;
          esac

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            bridge/test-results/
            bridge/coverage/
          retention-days: 30

  # Docker Integration Test (Full End-to-End)
  docker-integration:
    name: 🐳 Docker Integration Test
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Run comprehensive Docker test suite
        run: |
          cd bridge
          npm run test:all:ci

      - name: 📊 Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: bridge/test-results/
          retention-days: 30

      - name: 🧹 Cleanup Docker resources
        if: always()
        run: |
          cd bridge
          npm run test:all:ci:clean || true
          docker system prune -af || true

  # Security and Dependency Checks
  security:
    name: 🔒 Security & Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bridge/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd bridge
          npm ci

      - name: 🔒 Run security audit
        run: |
          cd bridge
          npm audit --audit-level moderate

      - name: 🔍 Check for outdated dependencies
        run: |
          cd bridge
          npm outdated || true

  # Performance Benchmarks
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bridge/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd bridge
          npm ci

      - name: ⚡ Run performance benchmarks
        run: |
          cd bridge
          npm run test:performance || echo "Performance tests not yet implemented"

  # Deployment Readiness Check
  deployment-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, docker-integration, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: bridge/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd bridge
          npm ci

      - name: 🏗️ Test production build
        run: |
          cd bridge
          npm run build

      - name: ✅ Deployment readiness verified
        run: |
          echo "✅ All checks passed! Project is ready for deployment."
          echo "🎉 Bridge is production-ready for any Anvil application."

  # Status Check (Required for PR protection)
  status-check:
    name: ✅ All Tests Passed
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, docker-integration, security]
    if: always()
    steps:
      - name: ✅ Check if all jobs succeeded
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.docker-integration.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All required checks passed!"
            echo "🎉 PR is ready to merge"
          else
            echo "❌ Some checks failed:"
            echo "- Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}"
            echo "- Tests: ${{ needs.test.result }}"
            echo "- Docker Integration: ${{ needs.docker-integration.result }}"
            echo "- Security: ${{ needs.security.result }}"
            exit 1
          fi 