name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Type Safety
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'bridge/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./bridge
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./bridge
      run: npm run lint
      
    - name: Check TypeScript types
      working-directory: ./bridge
      run: npm run type-check
      
    - name: Check code formatting
      working-directory: ./bridge
      run: npm run format:check

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests & Coverage
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'bridge/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./bridge
      run: npm ci
      
    - name: Run unit tests with coverage
      working-directory: ./bridge
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./bridge/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [quality-checks, unit-tests]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'bridge/package-lock.json'
        
    - name: Setup Java (for Anvil server)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Setup Python (for Anvil server)
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Anvil App Server
      run: |
        pip install anvil-app-server
        
    - name: Install dependencies
      working-directory: ./bridge
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./bridge
      run: npx playwright install --with-deps
      
    - name: Create test Anvil app
      run: |
        cd /tmp
        create-anvil-app todo-list TestTodoApp
        
    - name: Configure test database
      run: |
        cd /tmp/TestTodoApp
        echo "DB_URL: jdbc:postgresql://localhost:5432/testdb?user=postgres&password=postgres" > anvil.yaml
        
    - name: Run E2E tests with Anvil server
      working-directory: ./bridge
      run: |
        # Set the Anvil app path for the test script
        export ANVIL_TEST_APP_PATH="/tmp/TestTodoApp"
        npm run test:with-server
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: bridge/playwright-report/
        retention-days: 30

  build-test:
    runs-on: ubuntu-latest
    name: Build Verification
    needs: quality-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'bridge/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./bridge
      run: npm ci
      
    - name: Build application
      working-directory: ./bridge
      run: npm run build
      
    - name: Build library
      working-directory: ./bridge
      run: npm run build:lib

  security-scan:
    runs-on: ubuntu-latest
    name: Security & Dependency Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'bridge/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./bridge
      run: npm ci
      
    - name: Run security audit
      working-directory: ./bridge
      run: npm audit --audit-level moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  deployment-ready:
    runs-on: ubuntu-latest
    name: Deployment Readiness
    needs: [quality-checks, unit-tests, e2e-tests, build-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate deployment report
      run: |
        echo "ðŸŽ‰ All checks passed! Deployment ready."
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date -u)"
        
    - name: Create deployment artifact
      working-directory: ./bridge
      run: |
        mkdir -p deployment-artifacts
        echo "Deployment ready for commit ${{ github.sha }}" > deployment-artifacts/READY
        
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-ready
        path: bridge/deployment-artifacts/
        retention-days: 7 